(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[616],{8557:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/additional-features/blueprint",function(){return n(7713)}])},7713:function(e,t,n){"use strict";n.r(t),n.d(t,{__toc:function(){return l}});var i=n(5893),a=n(2673),s=n(3679),o=n(9296);n(4759);var r=n(2643),d=n(208);let l=[];function c(e){let t=Object.assign({h1:"h1",p:"p",a:"a",sup:"sup",code:"code",section:"section",h2:"h2",ol:"ol",li:"li"},(0,r.a)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{children:"Blueprint"}),"\n",(0,i.jsxs)(t.p,{children:["Plutus Contract Blueprint, as introduced by ",(0,i.jsx)(t.a,{href:"https://cips.cardano.org/cip/CIP-0057",children:"CIP-57"})," is an effective way of communicating desired structure of validator's associated types such as datum and redeemer to your off-chain code."]}),"\n",(0,i.jsx)(t.p,{children:"With Atlas, you can easily have these types generated for you based on provided schema, along with useful helper utilities!"}),"\n",(0,i.jsxs)(d.UW,{children:[(0,i.jsxs)(t.p,{children:['If your validator is parameterised, parameters must be "data" encoded (instead of scott or sums-of-products encoding',(0,i.jsx)(t.sup,{children:(0,i.jsx)(t.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})}),") as blueprint notation requires it (data) to be primary binary interface. This is not an issue for datums & redeemers as they are required to be data encoded anyway."]}),(0,i.jsx)(t.p,{children:"Validators written by tools such as Aiken use data encoding for validator parameters."})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://github.com/geniusyield/atlas/blob/main/tests/aiken/bar/validators/baz.ak",children:"Here"})," we have a parameterised Aiken validator. Mainly, it checks that sum of integers and length of bytestrings given in parameters, datum & redeemer sum up to a specific value."]}),"\n",(0,i.jsxs)(t.p,{children:["For this validator, we have a simple off-chain code ",(0,i.jsx)(t.a,{href:"https://github.com/geniusyield/atlas/blob/main/tests-privnet/GeniusYield/Test/Privnet/Blueprint.hs",children:"here"}),", have a look at it and we provide some description for it below."]}),"\n",(0,i.jsxs)(t.p,{children:["We first use Template Haskell to splice declarations from ",(0,i.jsx)(t.a,{href:"https://haddock.atlas-app.io/GeniusYield-Types-Blueprint-TH.html#v:makeBPTypes",children:(0,i.jsx)(t.code,{children:"makeBPTypes"})})," and ",(0,i.jsx)(t.a,{href:"https://haddock.atlas-app.io/GeniusYield-Types-Blueprint-TH.html#v:uponBPTypes",children:(0,i.jsx)(t.code,{children:"uponBPTypes"})}),". ",(0,i.jsx)(t.code,{children:"makeBPTypes"})," introduces types from definitions given in blueprint file and ",(0,i.jsx)(t.code,{children:"uponBPTypes"})," creates data related instances such as ",(0,i.jsx)(t.a,{href:"https://plutus.cardano.intersectmbo.org/haddock/latest/plutus-ledger-api/PlutusLedgerApi-Common.html#t:ToData",children:(0,i.jsx)(t.code,{children:"ToData"})}),", ",(0,i.jsx)(t.a,{href:"https://plutus.cardano.intersectmbo.org/haddock/latest/plutus-ledger-api/PlutusLedgerApi-Common.html#t:FromData",children:(0,i.jsx)(t.code,{children:"FromData"})})," for these types",(0,i.jsx)(t.sup,{children:(0,i.jsx)(t.a,{href:"#user-content-fn-2",id:"user-content-fnref-2","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"2"})}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["It is useful to see generated Template Haskell code to know for type and provided utility names which can be done via ",(0,i.jsx)(t.code,{children:"-ddump-splices"})," GHC flag. You may combine this with ",(0,i.jsx)(t.code,{children:"-ddump-to-file"})," to save the output to a file. If you are using cabal, see ",(0,i.jsx)(t.a,{href:"https://stackoverflow.com/questions/24717500/viewing-core-when-compiling-with-cabal/69678961#69678961",children:"this"})," answer on where one can find dumped splice files."]}),"\n",(0,i.jsxs)(t.p,{children:["Now we can apply parameters (whose types have been generated by Atlas) to our validator with provided ",(0,i.jsx)(t.code,{children:"applyParamsToBPValidator_baz_baz_spend"})," function and obtain ",(0,i.jsx)(t.code,{children:"GYScript"})," from it using ",(0,i.jsx)(t.code,{children:"scriptFromBPSerialisedScript"})," function. Likewise we have types generated for our datum & redeemer, sweet!"]}),"\n",(0,i.jsx)(t.p,{children:"Rest of the off-chain code just tries to interact with the validator by creating a UTxO towards it and then later consuming from it."}),"\n",(0,i.jsx)(d.UW,{children:(0,i.jsxs)(t.p,{children:["To interact with blueprint file, you'll usually just need to import ",(0,i.jsx)(t.a,{href:"https://haddock.atlas-app.io/GeniusYield-Types-Blueprint-TH.html",children:(0,i.jsx)(t.code,{children:"GeniusYield.Types.Blueprint.TH"})})," module (which is exposed by ",(0,i.jsx)(t.code,{children:"GeniusYield.Types"})," module), however if you want to inspect the parsed blueprint file, you can use ",(0,i.jsx)(t.a,{href:"https://haddock.atlas-app.io/GeniusYield-Types-Blueprint.html#v:readBlueprint",children:(0,i.jsx)(t.code,{children:"readBlueprint"})}),"."]})}),"\n","\n",(0,i.jsxs)(t.section,{"data-footnotes":!0,className:"footnotes",children:[(0,i.jsx)(t.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{id:"user-content-fn-1",children:["\n",(0,i.jsxs)(t.p,{children:["See ",(0,i.jsx)(t.a,{href:"https://cips.cardano.org/cip/CIP-0085",children:"CIP-85"})," to understand about different encodings used. ",(0,i.jsx)(t.a,{href:"#user-content-fnref-1","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content",children:"↩"})]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{id:"user-content-fn-2",children:["\n",(0,i.jsxs)(t.p,{children:["We could achieve both in single splice, however, since we are using utilities from PlutusTx to derive ",(0,i.jsx)(t.code,{children:"ToData"})," etc. instances, they require type to be in scope first. ",(0,i.jsx)(t.a,{href:"#user-content-fnref-2","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content",children:"↩"})]}),"\n"]}),"\n"]}),"\n"]})]})}let u={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,r.a)(),e.components);return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)},pageOpts:{filePath:"src/pages/additional-features/blueprint.mdx",route:"/additional-features/blueprint",timestamp:1740815755e3,pageMap:[{kind:"Meta",data:{index:{title:"Atlas",display:"hidden",theme:{layout:"raw"}},documentation:{title:"Documentation",type:"page",href:"/introduction"},introduction:"Introduction","getting-started":"Getting Started","additional-features":"Additional Features","more-tutorials":"More Tutorials",haddock:{title:"API Reference (Haddock) ⬈",href:"https://haddock.atlas-app.io/",newWindow:!0}}},{kind:"Folder",name:"additional-features",route:"/additional-features",children:[{kind:"Meta",data:{blueprint:"Blueprint","simple-scripts":"Simple Scripts",certificates:"Certificates",governance:"Governance Procedures","monad-io":"Provide MonadIO instances"}},{kind:"MdxPage",name:"blueprint",route:"/additional-features/blueprint"},{kind:"MdxPage",name:"certificates",route:"/additional-features/certificates"},{kind:"MdxPage",name:"governance",route:"/additional-features/governance"},{kind:"MdxPage",name:"monad-io",route:"/additional-features/monad-io"},{kind:"MdxPage",name:"simple-scripts",route:"/additional-features/simple-scripts"}]},{kind:"Folder",name:"getting-started",route:"/getting-started",children:[{kind:"Meta",data:{"how-to-build":"How to build?","smart-contract-intro":"Smart Contract",operations:"Operations over Contract",testing:"Testing",endpoints:"Creating Endpoints","browser-integration":"Browser Integration","unit-tests":{display:"hidden"},"integration-tests":{display:"hidden"}}},{kind:"MdxPage",name:"browser-integration",route:"/getting-started/browser-integration"},{kind:"MdxPage",name:"endpoints",route:"/getting-started/endpoints"},{kind:"MdxPage",name:"how-to-build",route:"/getting-started/how-to-build"},{kind:"MdxPage",name:"operations",route:"/getting-started/operations"},{kind:"MdxPage",name:"smart-contract-intro",route:"/getting-started/smart-contract-intro"},{kind:"MdxPage",name:"testing",route:"/getting-started/testing"}]},{kind:"MdxPage",name:"getting-started",route:"/getting-started"},{kind:"MdxPage",name:"index",route:"/"},{kind:"MdxPage",name:"introduction",route:"/introduction"},{kind:"MdxPage",name:"more-tutorials",route:"/more-tutorials"}],flexsearch:{codeblocks:!0},title:"Blueprint",headings:l},pageNextRoute:"/additional-features/blueprint",nextraLayout:s.ZP,themeConfig:o.Z};t.default=(0,a.j)(u)},9296:function(e,t,n){"use strict";n.d(t,{Z:function(){return c}});var i=n(5893);n(7294);var a=n(5675),s=n.n(a),o={src:"/_next/static/media/atlas-logo-light-mode.6077cdd3.svg",height:320,width:937,blurWidth:0,blurHeight:0},r={src:"/_next/static/media/atlas-logo-dark-mode.62b4f6dd.svg",height:320,width:945,blurWidth:0,blurHeight:0},d=n(2010),l=n(1163),c={logo:(0,i.jsx)(()=>{let{resolvedTheme:e}=(0,d.F)();return(0,i.jsx)(s(),{src:"light"===e?o:r,alt:"Atlas Logo",height:"42"})},{}),project:{link:"https://github.com/geniusyield/atlas"},docsRepositoryBase:"https://github.com/geniusyield/atlas-docs/tree/main",useNextSeoProps(){let{asPath:e}=(0,l.useRouter)(),t="All-in-one solution for writing off-chain code for Plutus contracts";return{titleTemplate:"/"===e?"ATLAS Plutus Application Backend | by Genius Yield":"Atlas | %s",description:t,canonical:"https://atlas-app.io",openGraph:{url:"https://atlas-app.io",description:t,images:[{url:"/open-graph.png",width:1200,height:630,alt:"Atlas - Application backend for Plutus smart contracts on Cardano",type:"image/png"}]},siteName:"Atlas",twitter:{handle:"@GeniusyieldO",site:"https://www.geniusyield.co",cardType:"summary_large_image"}}},head:(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("link",{rel:"apple-touch-icon",sizes:"180x180",href:"/favicon/apple-touch-icon.png"}),(0,i.jsx)("link",{rel:"icon",type:"image/png",sizes:"32x32",href:"/favicon/favicon-32x32.png"}),(0,i.jsx)("link",{rel:"icon",type:"image/png",sizes:"16x16",href:"/favicon/favicon-16x16.png"}),(0,i.jsx)("link",{rel:"manifest",href:"/favicon/site.webmanifest"}),(0,i.jsx)("link",{rel:"mask-icon",href:"/favicon/safari-pinned-tab.svg",color:"#5bbad5"}),(0,i.jsx)("link",{rel:"shortcut icon",href:"/favicon/favicon.ico"}),(0,i.jsx)("meta",{name:"msapplication-TileColor",content:"#da532c"}),(0,i.jsx)("meta",{name:"msapplication-config",content:"/favicon/browserconfig.xml"}),(0,i.jsx)("meta",{name:"theme-color",content:"#ffffff"})]}),footer:{component:(0,i.jsx)(i.Fragment,{})},nextThemes:{defaultTheme:"dark"},darkMode:!1,sidebar:{toggleButton:!0}}},5789:function(){}},function(e){e.O(0,[526,888,774,179],function(){return e(e.s=8557)}),_N_E=e.O()}]);